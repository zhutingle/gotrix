<?xml version="1.0" encoding="UTF-8" ?>
<funcs>

	<func id="1000" name="weichatPay" des="发起微信支付">
		<string name="_ip" must="true" />
		<int name="orderId" must="true" />
		<string name="body" must="true" len="0-256" />

		<!-- 第一步：计算总价格，并写入订单表中 -->
		<job result="orderno">RandOrderNo(${orderId})</job>
		<job>update orders set orderno = ${orderno},money = (select sum(count*price) from shopping,goods where shopping.goodid = goods.id and shopping.userid = ${userid} and shopping.orderid = ${orderId}) where userid = ${userid} and id = ${orderId}</job>

		<!-- 构建统一下单接口所需参数 -->
		<job result="info" one="true">select user.openid,cast(orders.money*100 as SIGNED) money from user,orders where user.id = orders.userid and orders.id = ${orderId} and orders.userid = ${userid}</job>
		<job result="openid">Json(${info},'openid')</job>
		<job result="total_fee">Json(${info},'money')</job>

		<job result="Appid">Config('Appid')</job>
		<job result="Mch_id">Config('Mch_id')</job>
		<job result="Notify_url">Config('Notify_url')</job>
		<job result="Trade_type">Config('Trade_type')</job>
		<job result="Nonce_str">RandString(32)</job>
		<job result="weichatParam">JsonSet('appid',${Appid},'mch_id',${Mch_id},'notify_url',${Notify_url},'trade_type',${Trade_type},'nonce_str',${Nonce_str},'body',${body},'total_fee',${total_fee},'out_trade_no',${orderId},'openid',${openid},'out_trade_no',${orderno},'spbill_create_ip',${_ip})</job>

		<!-- 对参数进行签名 -->
		<job result="Key">Config('Key')</job>
		<job result="sign">WeichatSign(${weichatParam},${Key})</job>
		<job>JsonSet(${weichatParam},'sign',${sign})</job>

		<!-- 请求微信服务器的统一下单接口 -->
		<job result="weichatResult">WeichatPay(${weichatParam})</job>
		<job result="returnCode">Json(${weichatResult},'return_code')</job>
		<job result="returnMsg">Json(${weichatResult},'return_msg')</job>
		<job>Equal(${returnCode},'FAIL',${returnMsg})</job>

		<!-- 验证接口返回的签名是否正确 -->
		<job result="sign">Json(${weichatResult},'sign')</job>
		<job>JsonSet(${weichatResult},'sign',null)</job>
		<job result="localSign">WeichatSign(${weichatResult},${Key})</job>
		<job>JsonSet('localSign',${localSign},'sign',${sign})</job>

		<!-- 构建微信HTML页面所需要参数 -->
		<job result="timeStamp">TimeStampSecond()</job>
		<job result="prepay_id">Json(${weichatResult},'prepay_id')</job>
		<job result="package">StringAdd('prepay_id=',${prepay_id})</job>
		<job result="htmlParam">JsonSet('appId',${Appid},'timeStamp',${timeStamp},'package',${package},'nonceStr',${Nonce_str},'signType','MD5')</job>
		<job result="sign">WeichatSign(${htmlParam},${Key})</job>
		<job>JsonSet(${htmlParam},'paySign',${sign})</job>

		<!-- 将参数写入到页面并返回 -->
		<job result="htmlParamString">JsonToString(${htmlParam})</job>
		<job result="returnHtml"><![CDATA[Format('<html><head><title>正在进行微信支付...</title></head><body><script type="text/javascript">function onBridgeReady() {WeixinJSBridge.invoke("getBrandWCPayRequest", %v, function(res) {if (res.err_msg == "get_brand_wcpay_request：ok") {alert("支付成功：" + res.err_msg);}else {alert(JSON.stringify(res));}});}if (typeof WeixinJSBridge == "undefined") {if (document.addEventListener) {document.addEventListener("WeixinJSBridgeReady", onBridgeReady, false);}else if (document.attachEvent) {document.attachEvent("WeixinJSBridgeReady",onBridgeReady);document.attachEvent("onWeixinJSBridgeReady", onBridgeReady);}} else {onBridgeReady();}</script></body></html>',${htmlParamString})]]></job>
		<job>Return(${returnHtml})</job>
	</func>

	<func id="1001" name="weichatCallback" des="微信支付回调" private="true">

		<!-- 验证签名是否正确 -->
		<job result="sign">Json(${weichat},'sign')</job>
		<job>JsonSet(${weichat},'sign',null)</job>
		<job result="Key">Config('Key')</job>
		<job result="localSign">WeichatSign(${weichat},${Key})</job>
		<job test="NotEqual(${sign},${localSign})"><![CDATA[Return('<xml><return_code>FAIL</return_code><return_msg>签名sign错误</return_msg></xml>')]]></job>

		<!-- 判断业务是否已经被处理 -->
		<job result="orderno">Json(${weichat},'out_trade_no')</job>
		<job result="orderInfo" one="true">select id,state from orders where orderno = ${orderno}</job>
		<job result="state">Json(${orderInfo},'state')</job>
		<job result="orderid">Json(${orderInfo},'id')</job>
		<job test="Equal(${state},2)"><![CDATA[Return('<xml><return_code>FAIL</return_code><return_msg>该订单号已经被处理</return_msg></xml>')]]></job>

		<!-- 更新订单状态 -->
		<job>update orders set state = 2 where id = ${orderid}</job>
		<!-- 一级分成 -->
		<job result="pInfo" one="true">select user2.id,orders.money * discount.level1 money1,orders.money * discount.level2 money2,orders.money * discount.level3 money3
			from user user1,user user2,orders,discount
			where user1.id = orders.userid and orders.id = ${orderid} and discount.id = 1 and user1.parent = user2.id
		</job>
		<job result="pId" test="NotEqual(${pInfo},null)">Json(${pInfo}, 'id')</job>
		<job result="money1" test="NotEqual(${pInfo},null)">Json(${pInfo},'money1')</job>
		<job test="NotEqual(${pId},null)">insert into recode(userid,orderid,level,score,state) values(${pId},${orderid},1,${money1},0)</job>

		<!-- 二级分成 -->
		<job result="ppInfo" test="NotEqual(${pId},null)" one="true">select user2.id from user user1, user user2 where user1.id = ${pId} and user1.parent = user2.id</job>
		<job result="ppId" test="NotEqual(${ppInfo},null)">Json(${ppInfo},'id')</job>
		<job result="money2" test="NotEqual(${pInfo},null)">Json(${pInfo},'money2')</job>
		<job test="NotEqual(${ppId},null)">insert into recode(userid,orderid,level,score,state) values(${ppId},${orderid},2,${money2},0)</job>

		<!-- 三级分成 -->
		<job result="pppInfo" test="NotEqual(${ppId},null)" one="true">select user2.id from user user1,user user2 where user1.id = ${ppId} and user1.parent = user2.id</job>
		<job result="pppId" test="NotEqual(${pppInfo},null)">Json(${pppInfo},'id')</job>
		<job result="money3" test="NotEqual(${pInfo},null)">Json(${pInfo},'money3')</job>
		<job test="NotEqual(${pppId},null)">insert into recode(userid,orderid,level,score,state) values(${pppId},${orderid},3,${money3},0)</job>

		<job><![CDATA[Return('<xml><return_code>SUCCESS</return_code><return_msg>OK</return_msg></xml>')]]></job>
	</func>

</funcs>
